{"version":3,"file":"pegaswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/entities/fractions/percent.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi';\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string;\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  BSCMAINNET = 56,\r\n  BSCTEST = 97\r\n};\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n};\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n};\r\n\r\nexport const FACTORY_ADDRESS = '0x5A95F1c1f2C5258FaEe2b59a0d3CEE9554977A05';\r\n\r\nexport const INIT_CODE_HASH = '0xadefdccdecd2b095b53fd5f5255246d4d040be085bc94541902802784b3e79ee';\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000);\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0);\r\nexport const ONE = JSBI.BigInt(1);\r\nexport const TWO = JSBI.BigInt(2);\r\nexport const THREE = JSBI.BigInt(3);\r\nexport const FIVE = JSBI.BigInt(5);\r\nexport const TEN = JSBI.BigInt(10);\r\nexport const _100 = JSBI.BigInt(100);\r\nexport const _997 = JSBI.BigInt(997);\r\nexport const _1000 = JSBI.BigInt(1000);\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n};\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n};\r\n","// see https://stackoverflow.com/a/41102306\r\n\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object;\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true;\r\n\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\r\n  };\r\n};\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true;\r\n\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\r\n  };\r\n};\r\n","import warning from 'tiny-warning';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport invariant from 'tiny-invariant';\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants';\r\nimport JSBI from 'jsbi';\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`);\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`);\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address);\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`);\r\n    return checksummedAddress;\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`);\r\n  };\r\n};\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh);\r\n};\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256);\r\n  let z: JSBI = ZERO;\r\n  let x: JSBI;\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y;\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x;\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE;\r\n  }\r\n  return z;\r\n};\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO');\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE');\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add);\r\n    return null;\r\n  } else {\r\n    const isFull = items.length === maxSize;\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add;\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length;\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    };\r\n    items.splice(lo, 0, add);\r\n    return isFull ? items.pop()! : null;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport _Decimal from 'decimal.js-light';\r\nimport _Big, { RoundingMode } from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport { parseBigintIsh } from '../../utils';\r\nimport { BigintIsh, Rounding, ONE } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nconst Decimal = toFormat(_Decimal);\r\nconst Big = toFormat(_Big);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI;\r\n  public readonly denominator: JSBI;\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator);\r\n    this.denominator = parseBigintIsh(denominator);\r\n  };\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator);\r\n  };\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\r\n  };\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  };\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    );\r\n  };\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  };\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding];\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  };\r\n};\r\n","import { validateSolidityTypeInstance } from '../utils';\r\nimport { SolidityType } from '../constants';\r\nimport JSBI from 'jsbi';\r\n/**\r\n * A currency is any fungible financial instrument on BINANCE, including BINANCE and all BEP20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is BINANCE.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number;\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly BINANCE: Currency = new Currency(18, 'BNB', 'Binance');\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.BINANCE`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  };\r\n};\r\n\r\nconst BINANCE = Currency.BINANCE;\r\nexport { BINANCE }\r\n","import invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from '../utils';\r\nimport { Currency } from './currency';\r\nimport { ChainId } from '../constants';\r\n/**\r\n * Represents an BEP20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId;\r\n  public readonly address: string;\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name);\r\n    this.chainId = chainId;\r\n    this.address = validateAndParseAddress(address);\r\n  };\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS');\r\n    invariant(this.address !== other.address, 'ADDRESSES');\r\n    return this.address.toLowerCase() < other.address.toLowerCase();\r\n  };\r\n};\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token) {\r\n    return false;\r\n  } else if (currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  };\r\n};\r\n\r\n\r\nexport const WBNB = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.BSCMAINNET]: new Token(ChainId.BSCMAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSCTEST]: new Token(ChainId.BSCTEST, '0xae13d989dac2f0debff460ac112a837c89baa7cd', 18, 'WBNB', 'Wrapped BNB')\r\n};\r\n","import _Big from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport invariant from 'tiny-invariant';\r\nimport { Fraction } from './fraction';\r\nimport { currencyEquals } from '../token';\r\nimport { Currency, BINANCE } from '../currency';\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils';\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nconst Big = toFormat(_Big);\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n\r\n  /**\r\n   * Helper that calls the constructor with the BINANCE currency\r\n   * @param amount BINANCE amount in wei\r\n   */\r\n  public static binance(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(BINANCE, amount);\r\n  };\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount);\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)));\r\n    this.currency = currency;\r\n  };\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator;\r\n  };\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\r\n  };\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\r\n  };\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  };\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS');\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount';\r\nimport { Token } from '../token';\r\nimport { BigintIsh } from '../../constants';\r\nimport invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token;\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount);\r\n    this.token = token;\r\n  };\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN');\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\r\n  };\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN');\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { Route } from '../route';\r\nimport { Fraction } from './fraction';\r\nimport { CurrencyAmount } from './currencyAmount';\r\nimport { Currency } from '../currency';\r\nimport { TokenAmount } from './tokenAmount';\r\nimport { Token, currencyEquals } from '../token';\r\nimport { BigintIsh, Rounding, TEN } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency; // input i.e. denominator\r\n  public readonly quoteCurrency: Currency; // output i.e. numerator\r\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = [];\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      );\r\n    };\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\r\n  };\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator);\r\n\r\n    this.baseCurrency = baseCurrency;\r\n    this.quoteCurrency = quoteCurrency;\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    );\r\n  };\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN');\r\n    const fraction = super.multiply(other);\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN');\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient);\r\n    }\r\n    return CurrencyAmount.binance(super.multiply(currencyAmount.raw).quotient);\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors';\r\nimport invariant from 'tiny-invariant'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Token } from './token';\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _997,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport JSBI from 'jsbi';\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token;\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount];\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS,\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      };\r\n    };\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\r\n  };\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'PGS',\r\n      'Pegaswap'\r\n    );\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount];\r\n  };\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1);\r\n  };\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\r\n  };\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\r\n  };\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n  };\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId;\r\n  };\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token;\r\n  };\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token;\r\n  };\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0];\r\n  };\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1];\r\n  };\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n  };\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN');\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token);\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    );\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\r\n  };\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN');\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    };\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token);\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    );\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\r\n  };\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN');\r\n\r\n    let liquidity: JSBI;\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n    };\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    };\r\n    return new TokenAmount(this.liquidityToken, liquidity);\r\n  };\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY');\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY');\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY');\r\n\r\n    let totalSupplyAdjusted: TokenAmount;\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply;\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST');\r\n      const kLastParsed = parseBigintIsh(kLast);\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\r\n        const rootKLast = sqrt(kLastParsed);\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n          const feeLiquidity = JSBI.divide(numerator, denominator);\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply;\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply;\r\n      };\r\n    };\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    );\r\n  };\r\n};\r\n","import { Contract } from '@ethersproject/contracts';\r\nimport { getNetwork } from '@ethersproject/networks';\r\nimport { getDefaultProvider } from '@ethersproject/providers';\r\nimport IPegaswapPair from './v2-core/build/IPegaswapPair.json';\r\nimport BEP20 from './abis/BEP20.json';\r\nimport { Pair } from './entities/pair';\r\nimport invariant from 'tiny-invariant';\r\nimport { Token } from './entities/token';\r\nimport { ChainId } from './constants';\r\nimport { TokenAmount } from './entities/fractions/tokenAmount';\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n};\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {};\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given binances provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, BEP20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals;\r\n          });\r\n    return new Token(chainId, address, parsedDecimals, symbol, name);\r\n  };\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID');\r\n    const address = Pair.getAddress(tokenA, tokenB);\r\n    const [reserves0, reserves1] = await new Contract(address, IPegaswapPair.abi, provider).getReserves();\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\r\n  };\r\n};\r\n","import { Fraction } from './fraction';\r\nimport { Rounding, _100 } from '../../constants';\r\n\r\nconst _100_PERCENT = new Fraction(_100);\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  };\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { Pair } from './pair';\r\nimport { Price } from './fractions/price';\r\nimport { Token, WBNB } from './token';\r\nimport { Currency, BINANCE } from './currency';\r\nimport { ChainId } from '../constants';\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[];\r\n  public readonly path: Token[];\r\n  public readonly input: Currency;\r\n  public readonly output: Currency;\r\n  public readonly midPrice: Price;\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    );\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === BINANCE && pairs[0].involvesToken(WBNB[pairs[0].chainId])),\r\n      'INPUT'\r\n    );\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === BINANCE && pairs[pairs.length - 1].involvesToken(WBNB[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    );\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WBNB[pairs[0].chainId]];\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i];\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH');\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\r\n      path.push(output);\r\n    };\r\n\r\n    this.pairs = pairs;\r\n    this.path = path;\r\n    this.midPrice = Price.fromRoute(this);\r\n    this.input = input;\r\n    this.output = output ?? path[path.length - 1];\r\n  };\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { CurrencyAmount } from './fractions/currencyAmount';\r\nimport { Fraction } from './fractions/fraction';\r\nimport { Percent } from './fractions/percent';\r\nimport { Price } from './fractions/price';\r\nimport { Pair } from './pair';\r\nimport { Route } from './route';\r\nimport { Currency, BINANCE } from './currency';\r\nimport { TokenAmount } from './fractions/tokenAmount';\r\nimport { currencyEquals, Token, WBNB } from './token';\r\nimport { sortedInsert } from '../utils';\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants';\r\n\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw);\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\r\n  return new Percent(slippage.numerator, slippage.denominator);\r\n};\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount;\r\n  readonly outputAmount: CurrencyAmount;\r\n};\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY');\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY');\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0;\r\n    };\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    };\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    };\r\n  };\r\n};\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b);\r\n  if (ioComp !== 0) {\r\n    return ioComp;\r\n  };\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1;\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1;\r\n  };\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length;\r\n};\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number;\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number;\r\n};\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is BINANCE, returns the WBNB token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\r\n  if (currencyAmount.currency === BINANCE) return new TokenAmount(WBNB[chainId], currencyAmount.raw);\r\n  invariant(false, 'CURRENCY');\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency;\r\n  if (currency === BINANCE) return WBNB[chainId];\r\n  invariant(false, 'CURRENCY');\r\n};\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route;\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType;\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount;\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount;\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price;\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price;\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent;\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\r\n  };\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length);\r\n    const nextPairs: Pair[] = new Array(route.pairs.length);\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT');\r\n      amounts[0] = wrappedAmount(amount, route.chainId);\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i];\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i]);\r\n        amounts[i + 1] = outputAmount;\r\n        nextPairs[i] = nextPair;\r\n      };\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT');\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1];\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i]);\r\n        amounts[i - 1] = inputAmount;\r\n        nextPairs[i - 1] = nextPair;\r\n      };\r\n    };\r\n\r\n    this.route = route;\r\n    this.tradeType = tradeType;\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === BINANCE\r\n        ? CurrencyAmount.binance(amounts[0].raw)\r\n        : amounts[0];\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === BINANCE\r\n        ? CurrencyAmount.binance(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1];\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    );\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\r\n  };\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount;\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient;\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.binance(slippageAdjustedAmountOut);\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount;\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.binance(slippageAdjustedAmountIn);\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION');\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined;\r\n    invariant(chainId !== undefined, 'CHAIN_ID');\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId);\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId);\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i];\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\r\n\r\n      let amountOut: TokenAmount;\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn);\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        );\r\n      };\r\n    };\r\n\r\n    return bestTrades;\r\n  };\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION');\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined;\r\n    invariant(chainId !== undefined, 'CHAIN_ID');\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId);\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId);\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i];\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\r\n\r\n      let amountIn: TokenAmount;\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut);\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        );\r\n      };\r\n    };\r\n\r\n    return bestTrades;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from './utils';\r\nimport { CurrencyAmount, BINANCE, Percent, Trade } from './entities';\r\nimport { TradeType } from './constants';\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent;\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number;\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string;\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean;\r\n};\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number;\r\n};\r\n\r\n/**\r\n * The parameters to use in the call to the Pegaswap Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pegaswap Router.\r\n   */\r\n  methodName: string;\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[];\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string;\r\n};\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`;\r\n};\r\n\r\nconst ZERO_HEX = '0x0';\r\n\r\n/**\r\n * Represents the Pegaswap Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {};\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const binanceIn = trade.inputAmount.currency === BINANCE;\r\n    const binanceOut = trade.outputAmount.currency === BINANCE;\r\n    // the router does not support both binance in and out\r\n    invariant(!(binanceIn && binanceOut), 'BINANCE_IN_OUT');\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL');\r\n\r\n    const to: string = validateAndParseAddress(options.recipient);\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage));\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage));\r\n    const path: string[] = trade.route.path.map(token => token.address);\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`;\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer);\r\n\r\n    let methodName: string;\r\n    let args: (string | string[])[];\r\n    let value: string;\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (binanceIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactBNBForTokensSupportingFeeOnTransferTokens' : 'swapExactBNBForTokens';\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline];\r\n          value = amountIn;\r\n        } else if (binanceOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForBNBSupportingFeeOnTransferTokens' : 'swapExactTokensForBNB';\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens';\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT');\r\n        if (binanceIn) {\r\n          methodName = 'swapBNBForExactTokens';\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline];\r\n          value = amountIn;\r\n        } else if (binanceOut) {\r\n          methodName = 'swapTokensForExactBNB';\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens';\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    };\r\n  };\r\n};\r\n"],"names":["ChainId","TradeType","Rounding","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","this","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","Currency","decimals","symbol","BINANCE","Token","chainId","equals","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WBNB","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","BSCMAINNET","BSCTEST","CurrencyAmount","currency","amount","parsedAmount","exponentiate","binance","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","BEP20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPegaswapPair","getReserves","reserves0","reserves1","balances","_100_PERCENT","Percent","Route","input","output","every","currentInput","midPrice","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","binanceIn","binanceOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}