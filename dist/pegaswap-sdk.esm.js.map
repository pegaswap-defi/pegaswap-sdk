{"version":3,"file":"pegaswap-sdk.esm.js","sources":["../src/errors.ts","../src/constants.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/entities/fractions/percent.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["// see https://stackoverflow.com/a/41102306\r\n\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object;\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true;\r\n\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\r\n  };\r\n};\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true;\r\n\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\r\n  };\r\n};\r\n","import JSBI from 'jsbi';\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string;\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  BSCMAINNET = 56,\r\n  BSCTEST = 97\r\n};\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n};\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n};\r\n\r\nexport const FACTORY_ADDRESS = '0x5A95F1c1f2C5258FaEe2b59a0d3CEE9554977A05';\r\n\r\nexport const INIT_CODE_HASH = '0xadefdccdecd2b095b53fd5f5255246d4d040be085bc94541902802784b3e79ee';\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000);\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0);\r\nexport const ONE = JSBI.BigInt(1);\r\nexport const TWO = JSBI.BigInt(2);\r\nexport const THREE = JSBI.BigInt(3);\r\nexport const FIVE = JSBI.BigInt(5);\r\nexport const TEN = JSBI.BigInt(10);\r\nexport const _100 = JSBI.BigInt(100);\r\nexport const _997 = JSBI.BigInt(997);\r\nexport const _1000 = JSBI.BigInt(1000);\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n};\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n};\r\n","import warning from 'tiny-warning';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport invariant from 'tiny-invariant';\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants';\r\nimport JSBI from 'jsbi';\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`);\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`);\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address);\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`);\r\n    return checksummedAddress;\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`);\r\n  };\r\n};\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh);\r\n};\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256);\r\n  let z: JSBI = ZERO;\r\n  let x: JSBI;\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y;\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x;\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE;\r\n  }\r\n  return z;\r\n};\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO');\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE');\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add);\r\n    return null;\r\n  } else {\r\n    const isFull = items.length === maxSize;\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add;\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length;\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    };\r\n    items.splice(lo, 0, add);\r\n    return isFull ? items.pop()! : null;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport _Decimal from 'decimal.js-light';\r\nimport _Big, { RoundingMode } from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport { parseBigintIsh } from '../../utils';\r\nimport { BigintIsh, Rounding, ONE } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nconst Decimal = toFormat(_Decimal);\r\nconst Big = toFormat(_Big);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI;\r\n  public readonly denominator: JSBI;\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator);\r\n    this.denominator = parseBigintIsh(denominator);\r\n  };\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator);\r\n  };\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\r\n  };\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  };\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    );\r\n  };\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    );\r\n  };\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    );\r\n  };\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  };\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding];\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  };\r\n};\r\n","import { validateSolidityTypeInstance } from '../utils';\r\nimport { SolidityType } from '../constants';\r\nimport JSBI from 'jsbi';\r\n/**\r\n * A currency is any fungible financial instrument on BINANCE, including BINANCE and all BEP20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is BINANCE.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number;\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly BINANCE: Currency = new Currency(18, 'BNB', 'Binance');\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.BINANCE`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  };\r\n};\r\n\r\nconst BINANCE = Currency.BINANCE;\r\nexport { BINANCE }\r\n","import invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from '../utils';\r\nimport { Currency } from './currency';\r\nimport { ChainId } from '../constants';\r\n/**\r\n * Represents an BEP20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId;\r\n  public readonly address: string;\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name);\r\n    this.chainId = chainId;\r\n    this.address = validateAndParseAddress(address);\r\n  };\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS');\r\n    invariant(this.address !== other.address, 'ADDRESSES');\r\n    return this.address.toLowerCase() < other.address.toLowerCase();\r\n  };\r\n};\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token) {\r\n    return false;\r\n  } else if (currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  };\r\n};\r\n\r\n\r\nexport const WBNB = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.BSCMAINNET]: new Token(ChainId.BSCMAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSCTEST]: new Token(ChainId.BSCTEST, '0xae13d989dac2f0debff460ac112a837c89baa7cd', 18, 'WBNB', 'Wrapped BNB')\r\n};\r\n","import _Big from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport invariant from 'tiny-invariant';\r\nimport { Fraction } from './fraction';\r\nimport { currencyEquals } from '../token';\r\nimport { Currency, BINANCE } from '../currency';\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils';\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nconst Big = toFormat(_Big);\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n\r\n  /**\r\n   * Helper that calls the constructor with the BINANCE currency\r\n   * @param amount BINANCE amount in wei\r\n   */\r\n  public static binance(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(BINANCE, amount);\r\n  };\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount);\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)));\r\n    this.currency = currency;\r\n  };\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator;\r\n  };\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\r\n  };\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\r\n  };\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  };\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS');\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount';\r\nimport { Token } from '../token';\r\nimport { BigintIsh } from '../../constants';\r\nimport invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token;\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount);\r\n    this.token = token;\r\n  };\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN');\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\r\n  };\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN');\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { Route } from '../route';\r\nimport { Fraction } from './fraction';\r\nimport { CurrencyAmount } from './currencyAmount';\r\nimport { Currency } from '../currency';\r\nimport { TokenAmount } from './tokenAmount';\r\nimport { Token, currencyEquals } from '../token';\r\nimport { BigintIsh, Rounding, TEN } from '../../constants';\r\nimport JSBI from 'jsbi';\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency; // input i.e. denominator\r\n  public readonly quoteCurrency: Currency; // output i.e. numerator\r\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = [];\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      );\r\n    };\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\r\n  };\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator);\r\n\r\n    this.baseCurrency = baseCurrency;\r\n    this.quoteCurrency = quoteCurrency;\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    );\r\n  };\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN');\r\n    const fraction = super.multiply(other);\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN');\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient);\r\n    }\r\n    return CurrencyAmount.binance(super.multiply(currencyAmount.raw).quotient);\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors';\r\nimport invariant from 'tiny-invariant'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Token } from './token';\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _997,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport JSBI from 'jsbi';\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token;\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount];\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS,\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      };\r\n    };\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\r\n  };\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'PGS',\r\n      'Pegaswap'\r\n    );\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount];\r\n  };\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1);\r\n  };\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\r\n  };\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\r\n  };\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n  };\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId;\r\n  };\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token;\r\n  };\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token;\r\n  };\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0];\r\n  };\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1];\r\n  };\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n  };\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN');\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token);\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    );\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\r\n  };\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN');\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    };\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token);\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    );\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\r\n  };\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN');\r\n\r\n    let liquidity: JSBI;\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n    };\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    };\r\n    return new TokenAmount(this.liquidityToken, liquidity);\r\n  };\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY');\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY');\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY');\r\n\r\n    let totalSupplyAdjusted: TokenAmount;\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply;\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST');\r\n      const kLastParsed = parseBigintIsh(kLast);\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\r\n        const rootKLast = sqrt(kLastParsed);\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n          const feeLiquidity = JSBI.divide(numerator, denominator);\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply;\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply;\r\n      };\r\n    };\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    );\r\n  };\r\n};\r\n","import { Contract } from '@ethersproject/contracts';\r\nimport { getNetwork } from '@ethersproject/networks';\r\nimport { getDefaultProvider } from '@ethersproject/providers';\r\nimport IPegaswapPair from './v2-core/build/IPegaswapPair.json';\r\nimport BEP20 from './abis/BEP20.json';\r\nimport { Pair } from './entities/pair';\r\nimport invariant from 'tiny-invariant';\r\nimport { Token } from './entities/token';\r\nimport { ChainId } from './constants';\r\nimport { TokenAmount } from './entities/fractions/tokenAmount';\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n};\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {};\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given binances provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, BEP20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals;\r\n          });\r\n    return new Token(chainId, address, parsedDecimals, symbol, name);\r\n  };\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID');\r\n    const address = Pair.getAddress(tokenA, tokenB);\r\n    const [reserves0, reserves1] = await new Contract(address, IPegaswapPair.abi, provider).getReserves();\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\r\n  };\r\n};\r\n","import { Fraction } from './fraction';\r\nimport { Rounding, _100 } from '../../constants';\r\n\r\nconst _100_PERCENT = new Fraction(_100);\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  };\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { Pair } from './pair';\r\nimport { Price } from './fractions/price';\r\nimport { Token, WBNB } from './token';\r\nimport { Currency, BINANCE } from './currency';\r\nimport { ChainId } from '../constants';\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[];\r\n  public readonly path: Token[];\r\n  public readonly input: Currency;\r\n  public readonly output: Currency;\r\n  public readonly midPrice: Price;\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    );\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === BINANCE && pairs[0].involvesToken(WBNB[pairs[0].chainId])),\r\n      'INPUT'\r\n    );\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === BINANCE && pairs[pairs.length - 1].involvesToken(WBNB[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    );\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WBNB[pairs[0].chainId]];\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i];\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH');\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\r\n      path.push(output);\r\n    };\r\n\r\n    this.pairs = pairs;\r\n    this.path = path;\r\n    this.midPrice = Price.fromRoute(this);\r\n    this.input = input;\r\n    this.output = output ?? path[path.length - 1];\r\n  };\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { CurrencyAmount } from './fractions/currencyAmount';\r\nimport { Fraction } from './fractions/fraction';\r\nimport { Percent } from './fractions/percent';\r\nimport { Price } from './fractions/price';\r\nimport { Pair } from './pair';\r\nimport { Route } from './route';\r\nimport { Currency, BINANCE } from './currency';\r\nimport { TokenAmount } from './fractions/tokenAmount';\r\nimport { currencyEquals, Token, WBNB } from './token';\r\nimport { sortedInsert } from '../utils';\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants';\r\n\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw);\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\r\n  return new Percent(slippage.numerator, slippage.denominator);\r\n};\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount;\r\n  readonly outputAmount: CurrencyAmount;\r\n};\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY');\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY');\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0;\r\n    };\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    };\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    };\r\n  };\r\n};\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b);\r\n  if (ioComp !== 0) {\r\n    return ioComp;\r\n  };\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1;\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1;\r\n  };\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length;\r\n};\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number;\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number;\r\n};\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is BINANCE, returns the WBNB token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\r\n  if (currencyAmount.currency === BINANCE) return new TokenAmount(WBNB[chainId], currencyAmount.raw);\r\n  invariant(false, 'CURRENCY');\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency;\r\n  if (currency === BINANCE) return WBNB[chainId];\r\n  invariant(false, 'CURRENCY');\r\n};\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route;\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType;\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount;\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount;\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price;\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price;\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent;\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\r\n  };\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length);\r\n    const nextPairs: Pair[] = new Array(route.pairs.length);\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT');\r\n      amounts[0] = wrappedAmount(amount, route.chainId);\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i];\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i]);\r\n        amounts[i + 1] = outputAmount;\r\n        nextPairs[i] = nextPair;\r\n      };\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT');\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1];\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i]);\r\n        amounts[i - 1] = inputAmount;\r\n        nextPairs[i - 1] = nextPair;\r\n      };\r\n    };\r\n\r\n    this.route = route;\r\n    this.tradeType = tradeType;\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === BINANCE\r\n        ? CurrencyAmount.binance(amounts[0].raw)\r\n        : amounts[0];\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === BINANCE\r\n        ? CurrencyAmount.binance(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1];\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    );\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\r\n  };\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount;\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient;\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.binance(slippageAdjustedAmountOut);\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount;\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.binance(slippageAdjustedAmountIn);\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION');\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined;\r\n    invariant(chainId !== undefined, 'CHAIN_ID');\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId);\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId);\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i];\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\r\n\r\n      let amountOut: TokenAmount;\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn);\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        );\r\n      };\r\n    };\r\n\r\n    return bestTrades;\r\n  };\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION');\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined;\r\n    invariant(chainId !== undefined, 'CHAIN_ID');\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId);\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId);\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i];\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\r\n\r\n      let amountIn: TokenAmount;\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut);\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        );\r\n      };\r\n    };\r\n\r\n    return bestTrades;\r\n  };\r\n};\r\n","import invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from './utils';\r\nimport { CurrencyAmount, BINANCE, Percent, Trade } from './entities';\r\nimport { TradeType } from './constants';\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent;\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number;\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string;\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean;\r\n};\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number;\r\n};\r\n\r\n/**\r\n * The parameters to use in the call to the Pegaswap Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pegaswap Router.\r\n   */\r\n  methodName: string;\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[];\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string;\r\n};\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`;\r\n};\r\n\r\nconst ZERO_HEX = '0x0';\r\n\r\n/**\r\n * Represents the Pegaswap Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {};\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const binanceIn = trade.inputAmount.currency === BINANCE;\r\n    const binanceOut = trade.outputAmount.currency === BINANCE;\r\n    // the router does not support both binance in and out\r\n    invariant(!(binanceIn && binanceOut), 'BINANCE_IN_OUT');\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL');\r\n\r\n    const to: string = validateAndParseAddress(options.recipient);\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage));\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage));\r\n    const path: string[] = trade.route.path.map(token => token.address);\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`;\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer);\r\n\r\n    let methodName: string;\r\n    let args: (string | string[])[];\r\n    let value: string;\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (binanceIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactBNBForTokensSupportingFeeOnTransferTokens' : 'swapExactBNBForTokens';\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline];\r\n          value = amountIn;\r\n        } else if (binanceOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForBNBSupportingFeeOnTransferTokens' : 'swapExactTokensForBNB';\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens';\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT');\r\n        if (binanceIn) {\r\n          methodName = 'swapBNBForExactTokens';\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline];\r\n          value = amountIn;\r\n        } else if (binanceOut) {\r\n          methodName = 'swapTokensForExactBNB';\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens';\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline];\r\n          value = ZERO_HEX;\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    };\r\n  };\r\n};\r\n"],"names":["CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","Currency","decimals","symbol","BINANCE","Token","chainId","equals","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WBNB","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","BSCMAINNET","BSCTEST","CurrencyAmount","currency","amount","parsedAmount","exponentiate","binance","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","BEP20","then","fetchPairData","IPegaswapPair","abi","getReserves","reserves0","reserves1","balances","_100_PERCENT","Percent","Route","input","output","every","currentInput","midPrice","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","binanceIn","binanceOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappingsiBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb;AAAA;;AAGE;;;AACE;AAHc,qCAAA,GAAoC,IAApC;AAId,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAA+CC,KAA/C;AAQC,AAED;;;;;AAIA,IAAaC,4BAAb;AAAA;;AAGE;;;AACE;AAHc,yCAAA,GAAuC,IAAvC;AAId,WAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAkDC,KAAlD;;;ICjBYE,OAAZ;;AAAA,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,gCAAA,aAAA;AACAA,EAAAA,8BAAA,UAAA;AACAA,EAAAA,mCAAA,eAAA;AACAA,EAAAA,gCAAA,YAAA;AACD,CARD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;IAUYC,SAAZ;;AAAA,WAAYA;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;IAKYC,QAAZ;;AAAA,WAAYA;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;IAMaC,eAAe,GAAG,4CAAxB;AAEP,IAAaC,cAAc,GAAG,oEAAvB;AAEP,IAAaC,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ,CAA1B;;AAGP,AAAO,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACP,AAAO,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACP,AAAO,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACP,AAAO,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACP,AAAO,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACP,AAAO,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACP,AAAO,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACP,AAAO,IAAMQ,IAAI,gBAAGT,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACP,AAAO,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,AAAA,IAAYU,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,qBAAA,UAAA;AACAA,EAAAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTb,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BU,YAAY,CAACG,OAFiB,iBAEPd,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;;SC1CSc,6BAA6BC,OAAaC;AACxD,GAAUjB,IAAI,CAACkB,kBAAL,CAAwBF,KAAxB,EAA+Bd,IAA/B,CAAV,2CAAAiB,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,GAAAE,SAAS,OAAT;AACA,GAAUnB,IAAI,CAACoB,eAAL,CAAqBJ,KAArB,EAA4BJ,oBAAoB,CAACK,YAAD,CAAhD,CAAV,2CAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,GAAAE,SAAS,OAAT;AACD;;AAGD,SAAgBE,wBAAwBC;AACtC,MAAI;AACF,QAAMC,kBAAkB,GAAGC,UAAU,CAACF,OAAD,CAArC;AACA,4CAAAG,OAAO,CAACH,OAAO,KAAKC,kBAAb,EAAoCD,OAApC,0BAAP;AACA,WAAOC,kBAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,6CAAAP,SAAS,QAAWG,OAAX,8BAAT,GAAAH,SAAS,OAAT;AACD;AACF;AAAA,SAEeQ,eAAeC;AAC7B,SAAOA,SAAS,YAAY5B,IAArB,GACH4B,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACA5B,IAAI,CAACC,MAAL,CAAY2B,SAAS,CAACC,QAAV,EAAZ,CADA,GAEA7B,IAAI,CAACC,MAAL,CAAY2B,SAAZ,CAJJ;AAKD;AAAA;AAGD,SAAgBE,KAAKC;AACnBhB,EAAAA,4BAA4B,CAACgB,CAAD,EAAIpB,YAAY,CAACG,OAAjB,CAA5B;AACA,MAAIkB,CAAC,GAAS9B,IAAd;AACA,MAAI+B,CAAJ;;AACA,MAAIjC,IAAI,CAACkC,WAAL,CAAiBH,CAAjB,EAAoB1B,KAApB,CAAJ,EAAgC;AAC9B2B,IAAAA,CAAC,GAAGD,CAAJ;AACAE,IAAAA,CAAC,GAAGjC,IAAI,CAACmC,GAAL,CAASnC,IAAI,CAACoC,MAAL,CAAYL,CAAZ,EAAe3B,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;AACA,WAAOH,IAAI,CAACqC,QAAL,CAAcJ,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAGjC,IAAI,CAACoC,MAAL,CAAYpC,IAAI,CAACmC,GAAL,CAASnC,IAAI,CAACoC,MAAL,CAAYL,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4C7B,GAA5C,CAAJ;AACD;AACF,GAPD,MAOO,IAAIJ,IAAI,CAACsC,QAAL,CAAcP,CAAd,EAAiB7B,IAAjB,CAAJ,EAA4B;AACjC8B,IAAAA,CAAC,GAAG7B,GAAJ;AACD;;AACD,SAAO6B,CAAP;AACD;AAAA,AAGD;;AACA,SAAgBO,aAAgBC,OAAYL,KAAQM,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,4CAAAtB,SAAS,QAAc,eAAd,CAAT,GAAAA,SAAS,OAAT;;AAEA,IAAUqB,KAAK,CAACG,MAAN,IAAgBF,OAA1B,4CAAAtB,SAAS,QAA0B,YAA1B,CAAT,GAAAA,SAAS,OAAT;;AAGA,MAAIqB,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,KAAK,CAACI,IAAN,CAAWT,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMU,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;AAGL,QAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BR,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIW,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;AAGA,WAAOG,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAab,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCW,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;AACDR,IAAAA,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBX,GAApB;AACA,WAAOU,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;;;ACxED,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB5D,QAAQ,CAAC6D,UADe,IACFN,OAAO,CAACM,UADN,wBAExB7D,QAAQ,CAAC8D,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxB9D,QAAQ,CAAC+D,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBhE,QAAQ,CAAC6D,UADS,KAAA,mBAElB7D,QAAQ,CAAC8D,aAFS,KAAA,mBAGlB9D,QAAQ,CAAC+D,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyB5D;;;AAChE,SAAK2D,SAAL,GAAiBnC,cAAc,CAACmC,SAAD,CAA/B;AACA,SAAKC,WAAL,GAAmBpC,cAAc,CAACoC,WAAD,CAAjC;AACD;;AAPH;;AAAA,SAmBSC,MAnBT,GAmBS;AACL,WAAO,IAAIH,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GArBH;;AAAA,SAuBS3B,GAvBT,GAuBS,aAAI8B,KAAJ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;;AACA,QAAIjE,IAAI,CAACmE,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa7D,IAAI,CAACmC,GAAL,CAAS,KAAK2B,SAAd,EAAyBI,WAAW,CAACJ,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL7D,IAAI,CAACmC,GAAL,CACEnC,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEE/D,IAAI,CAACoE,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL/D,IAAI,CAACoE,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAnCH;;AAAA,SAqCSM,QArCT,GAqCS,kBAASJ,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;;AACA,QAAIjE,IAAI,CAACmE,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa7D,IAAI,CAACqE,QAAL,CAAc,KAAKP,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL7D,IAAI,CAACqE,QAAL,CACErE,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEE/D,IAAI,CAACoE,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL/D,IAAI,CAACoE,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAjDH;;AAAA,SAmDS1B,QAnDT,GAmDS,kBAAS4B,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;AACA,WAAOjE,IAAI,CAACqC,QAAL,CACLrC,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAEL/D,IAAI,CAACoE,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzDH;;AAAA,SA2DSO,OA3DT,GA2DS,iBAAQL,KAAR;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;AACA,WAAOjE,IAAI,CAACmE,KAAL,CACLnE,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAEL/D,IAAI,CAACoE,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmES7B,WAnET,GAmES,qBAAY+B,KAAZ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;AACA,WAAOjE,IAAI,CAACkC,WAAL,CACLlC,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAEL/D,IAAI,CAACoE,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESK,QA3ET,GA2ES,kBAASH,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL7D,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CADK,EAEL9D,IAAI,CAACoE,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFS3B,MAnFT,GAmFS,gBAAO6B,KAAP;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAalC,cAAc,CAACsC,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL7D,IAAI,CAACoE,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAEL/D,IAAI,CAACoE,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACJ,SAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSS,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqB9E,QAAQ,CAAC8D;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,2CAAArD,SAAS,QAAyCqD,iBAAzC,yBAAT,GAAArD,SAAS,OAAT;AACA,MAAUqD,iBAAiB,GAAG,CAA9B,4CAAArD,SAAS,QAA2BqD,iBAA3B,uBAAT,GAAArD,SAAS,OAAT;AAEAgC,IAAAA,OAAO,CAAC2B,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAElB,qBAAqB,CAACkB,QAAD;AAAnE,KAAZ;AACA,QAAMM,QAAQ,GAAG,IAAI7B,OAAJ,CAAY,KAAKW,SAAL,CAAejC,QAAf,EAAZ,EACdoD,GADc,CACV,KAAKlB,WAAL,CAAiBlC,QAAjB,EADU,EAEdqD,mBAFc,CAEMV,iBAFN,CAAjB;AAGA,WAAOQ,QAAQ,CAAC5B,QAAT,CAAkB4B,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;AACD,GAxGH;;AAAA,SA0GSW,OA1GT,GA0GS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqB9E,QAAQ,CAAC8D;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,2CAAAhE,SAAS,QAAqCgE,aAArC,yBAAT,GAAAhE,SAAS,OAAT;AACA,MAAUgE,aAAa,IAAI,CAA3B,4CAAAhE,SAAS,QAAwBgE,aAAxB,mBAAT,GAAAhE,SAAS,OAAT;AAEAmC,IAAAA,GAAG,CAAC+B,EAAJ,GAASF,aAAT;AACA7B,IAAAA,GAAG,CAACgC,EAAJ,GAAS1B,eAAe,CAACc,QAAD,CAAxB;AACA,WAAO,IAAIpB,GAAJ,CAAQ,KAAKQ,SAAL,CAAejC,QAAf,EAAR,EAAmCoD,GAAnC,CAAuC,KAAKlB,WAAL,CAAiBlC,QAAjB,EAAvC,EAAoEuB,QAApE,CAA6E+B,aAA7E,EAA4FV,MAA5F,CAAP;AACD,GArHH;;AAAA;AAAA;AAAA;AAUE;AACE,aAAOzE,IAAI,CAACoC,MAAL,CAAY,KAAK0B,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD;AAZH;AAAA;AAAA;AAeE;AACE,aAAO,IAAIF,QAAJ,CAAa7D,IAAI,CAACuF,SAAL,CAAe,KAAKzB,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAjBH;;AAAA;AAAA;;ACpBA;;;;;;AAKA,IAAayB,QAAb;AAUE;;;;;;AAMA,kBAAsBC,QAAtB,EAAwCC,MAAxC,EAAyDtG,IAAzD;AACE2B,EAAAA,4BAA4B,CAACf,IAAI,CAACC,MAAL,CAAYwF,QAAZ,CAAD,EAAwB9E,YAAY,CAACE,KAArC,CAA5B;AAEA,OAAK4E,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKtG,IAAL,GAAYA,IAAZ;AACD,CAtBH;AAKE;;;;AAGuBoG,gBAAA,gBAAoB,IAAIA,QAAJ,CAAa,EAAb,EAAiB,KAAjB,EAAwB,SAAxB,CAApB;AAexB,IAEKG,OAAO,GAAGH,QAAQ,CAACG,OAAzB;;;AC7BA;;;;AAGA,IAAaC,KAAb;AAAA;;AAIE,iBAAmBC,OAAnB,EAAqCvE,OAArC,EAAsDmE,QAAtD,EAAwEC,MAAxE,EAAyFtG,IAAzF;;;AACE,iCAAMqG,QAAN,EAAgBC,MAAhB,EAAwBtG,IAAxB;AACA,UAAKyG,OAAL,GAAeA,OAAf;AACA,UAAKvE,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;;AACD;;AARH;;AAUE;;;;AAVF,SAcSwE,MAdT,GAcS,gBAAO7B,KAAP;AACL;AACA,QAAI,SAASA,KAAb,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAK4B,OAAL,KAAiB5B,KAAK,CAAC4B,OAAvB,IAAkC,KAAKvE,OAAL,KAAiB2C,KAAK,CAAC3C,OAAhE;AACD;AAED;;;;;;AAtBF;;AAAA,SA4BSyE,WA5BT,GA4BS,qBAAY9B,KAAZ;AACL,MAAU,KAAK4B,OAAL,KAAiB5B,KAAK,CAAC4B,OAAjC,4CAAA1E,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,KAAKG,OAAL,KAAiB2C,KAAK,CAAC3C,OAAjC,4CAAAH,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,KAAKG,OAAL,CAAa0E,WAAb,KAA6B/B,KAAK,CAAC3C,OAAN,CAAc0E,WAAd,EAApC;AACD,GAhCH;;AAAA;AAAA,EAA2BR,QAA3B;AAiCC,AAED;;;;AAGA,SAAgBS,eAAeC,WAAqBC;AAClD,MAAID,SAAS,YAAYN,KAArB,IAA8BO,SAAS,YAAYP,KAAvD,EAA8D;AAC5D,WAAOM,SAAS,CAACJ,MAAV,CAAiBK,SAAjB,CAAP;AACD,GAFD,MAEO,IAAID,SAAS,YAAYN,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA,IAAIO,SAAS,YAAYP,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAOM,SAAS,KAAKC,SAArB;AACD;AACF;AAAA,IAGYC,IAAI,sBACd1G,OAAO,CAAC2G,OADM,iBACI,IAAIT,KAAJ,CACjBlG,OAAO,CAAC2G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,aALiB,CADJ,QAQd3G,OAAO,CAAC4G,OARM,iBAQI,IAAIV,KAAJ,CACjBlG,OAAO,CAAC4G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CARJ,QAed5G,OAAO,CAAC6G,OAfM,iBAeI,IAAIX,KAAJ,CACjBlG,OAAO,CAAC6G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CAfJ,QAsBd7G,OAAO,CAAC8G,KAtBM,iBAsBE,IAAIZ,KAAJ,CAAUlG,OAAO,CAAC8G,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,MAA3E,EAAmF,eAAnF,CAtBF,QAuBd9G,OAAO,CAAC+G,KAvBM,iBAuBE,IAAIb,KAAJ,CAAUlG,OAAO,CAAC+G,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,MAA3E,EAAmF,eAAnF,CAvBF,QAwBd/G,OAAO,CAACgH,UAxBM,iBAwBO,IAAId,KAAJ,CAAUlG,OAAO,CAACgH,UAAlB,EAA8B,4CAA9B,EAA4E,EAA5E,EAAgF,MAAhF,EAAwF,aAAxF,CAxBP,QAyBdhH,OAAO,CAACiH,OAzBM,iBAyBI,IAAIf,KAAJ,CAAUlG,OAAO,CAACiH,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,MAA7E,EAAqF,aAArF,CAzBJ,QAAV;;AChDP,IAAMrD,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAaqD,cAAb;AAAA;;AAWE;AACA,0BAAsBC,QAAtB,EAA0CC,MAA1C;;;AACE,QAAMC,YAAY,GAAGpF,cAAc,CAACmF,MAAD,CAAnC;AACA/F,IAAAA,4BAA4B,CAACgG,YAAD,EAAepG,YAAY,CAACG,OAA5B,CAA5B;AAEA,iCAAMiG,YAAN,EAAoB/G,IAAI,CAACgH,YAAL,CAAkBzG,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAY4G,QAAQ,CAACpB,QAArB,CAAvB,CAApB;AACA,UAAKoB,QAAL,GAAgBA,QAAhB;;AACD;AAfD;;;;;;AAHF,iBAOgBI,OAPhB,GAOS,iBAAeH,MAAf;AACL,WAAO,IAAIF,cAAJ,CAAmBjB,OAAnB,EAA4BmB,MAA5B,CAAP;AACD,GATH;;AAAA;;AAAA,SAwBS3E,GAxBT,GAwBS,aAAI8B,KAAJ;AACL,KAAUgC,cAAc,CAAC,KAAKY,QAAN,EAAgB5C,KAAK,CAAC4C,QAAtB,CAAxB,2CAAA1F,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,IAAIyF,cAAJ,CAAmB,KAAKC,QAAxB,EAAkC7G,IAAI,CAACmC,GAAL,CAAS,KAAK+E,GAAd,EAAmBjD,KAAK,CAACiD,GAAzB,CAAlC,CAAP;AACD,GA3BH;;AAAA,SA6BS7C,QA7BT,GA6BS,kBAASJ,KAAT;AACL,KAAUgC,cAAc,CAAC,KAAKY,QAAN,EAAgB5C,KAAK,CAAC4C,QAAtB,CAAxB,2CAAA1F,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,IAAIyF,cAAJ,CAAmB,KAAKC,QAAxB,EAAkC7G,IAAI,CAACqE,QAAL,CAAc,KAAK6C,GAAnB,EAAwBjD,KAAK,CAACiD,GAA9B,CAAlC,CAAP;AACD,GAhCH;;AAAA,SAkCS3C,aAlCT,GAkCS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqB9E,QAAQ,CAAC6D;;;AAE9B,+BAAac,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;AACD,GAxCH;;AAAA,SA0CSU,OA1CT,GA0CS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QACLS;AAAAA,MAAAA,gBAAwB,KAAK0B,QAAL,CAAcpB;;;QAEtCf;AAAAA,MAAAA,WAAqB9E,QAAQ,CAAC6D;;;AAE9B,MAAU0B,aAAa,IAAI,KAAK0B,QAAL,CAAcpB,QAAzC,4CAAAtE,SAAS,QAA0C,UAA1C,CAAT,GAAAA,SAAS,OAAT;AACA,+BAAaiE,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;AACD,GAjDH;;AAAA,SAmDSyC,OAnDT,GAmDS,iBAAQ1C,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9BrB,IAAAA,KAAG,CAAC+B,EAAJ,GAAS,KAAKwB,QAAL,CAAcpB,QAAvB;AACA,WAAO,IAAInC,KAAJ,CAAQ,KAAKQ,SAAL,CAAejC,QAAf,EAAR,EAAmCoD,GAAnC,CAAuC,KAAKlB,WAAL,CAAiBlC,QAAjB,EAAvC,EAAoEuB,QAApE,CAA6EqB,MAA7E,CAAP;AACD,GAtDH;;AAAA;AAAA;AAAA,SAoBE;AACE,aAAO,KAAKX,SAAZ;AACD;AAtBH;;AAAA;AAAA,EAAoCD,QAApC;;ICNauD,WAAb;AAAA;;AAGE;AACA,uBAAmBC,KAAnB,EAAiCP,MAAjC;;;AACE,uCAAMO,KAAN,EAAaP,MAAb;AACA,UAAKO,KAAL,GAAaA,KAAb;;AACD;;AAPH;;AAAA,SASSlF,GATT,GASS,aAAI8B,KAAJ;AACL,KAAU,KAAKoD,KAAL,CAAWvB,MAAX,CAAkB7B,KAAK,CAACoD,KAAxB,CAAV,2CAAAlG,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,IAAIiG,WAAJ,CAAgB,KAAKC,KAArB,EAA4BrH,IAAI,CAACmC,GAAL,CAAS,KAAK+E,GAAd,EAAmBjD,KAAK,CAACiD,GAAzB,CAA5B,CAAP;AACD,GAZH;;AAAA,SAcS7C,QAdT,GAcS,kBAASJ,KAAT;AACL,KAAU,KAAKoD,KAAL,CAAWvB,MAAX,CAAkB7B,KAAK,CAACoD,KAAxB,CAAV,2CAAAlG,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,IAAIiG,WAAJ,CAAgB,KAAKC,KAArB,EAA4BrH,IAAI,CAACqE,QAAL,CAAc,KAAK6C,GAAnB,EAAwBjD,KAAK,CAACiD,GAA9B,CAA5B,CAAP;AACD,GAjBH;;AAAA;AAAA,EAAiCN,cAAjC;;ICIaU,KAAb;AAAA;;AAiBE;AACA,iBAAmBC,YAAnB,EAA2CC,aAA3C,EAAoEzD,WAApE,EAA4FD,SAA5F;;;AACE,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKwD,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKC,MAAL,GAAc,IAAI5D,QAAJ,CACZ7D,IAAI,CAACgH,YAAL,CAAkBzG,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYsH,YAAY,CAAC9B,QAAzB,CAAvB,CADY,EAEZzF,IAAI,CAACgH,YAAL,CAAkBzG,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYuH,aAAa,CAAC/B,QAA1B,CAAvB,CAFY,CAAd;;AAID;;AA3BH,QAKgBiC,SALhB,GAKS,mBAAiBC,KAAjB;AACL,QAAMC,MAAM,GAAY,EAAxB;;AACA,yDAAwBD,KAAK,CAACE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;AAAA;AAAA,UAAnCC,CAAmC;AAAA,UAAhCC,IAAgC;AAC7CJ,MAAAA,MAAM,CAAChF,IAAP,CACE+E,KAAK,CAACM,IAAN,CAAWF,CAAX,EAAcjC,MAAd,CAAqBkC,IAAI,CAACE,MAA1B,IACI,IAAIZ,KAAJ,CAAUU,IAAI,CAACG,QAAL,CAActB,QAAxB,EAAkCmB,IAAI,CAACI,QAAL,CAAcvB,QAAhD,EAA0DmB,IAAI,CAACG,QAAL,CAAcjB,GAAxE,EAA6Ec,IAAI,CAACI,QAAL,CAAclB,GAA3F,CADJ,GAEI,IAAII,KAAJ,CAAUU,IAAI,CAACI,QAAL,CAAcvB,QAAxB,EAAkCmB,IAAI,CAACG,QAAL,CAActB,QAAhD,EAA0DmB,IAAI,CAACI,QAAL,CAAclB,GAAxE,EAA6Ec,IAAI,CAACG,QAAL,CAAcjB,GAA3F,CAHN;AAKD;AACD,WAAOU,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;AAAA,aAA+BD,WAAW,CAACnE,QAAZ,CAAqBoE,YAArB,CAA/B;AAAA,KAAvB,EAA0FZ,MAAM,CAAC,CAAD,CAAhG,CAAP;AACD,GAfH;;AAAA;;AAAA,SAqCS5D,MArCT,GAqCS;AACL,WAAO,IAAIsD,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKzD,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD,GAvCH;;AAAA,SAyCSK,QAzCT,GAyCS,kBAASH,KAAT;AACL,KAAUgC,cAAc,CAAC,KAAKuB,aAAN,EAAqBvD,KAAK,CAACsD,YAA3B,CAAxB,2CAAApG,SAAS,QAAyD,OAAzD,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMsH,QAAQ,uBAASrE,QAAT,YAAkBH,KAAlB,CAAd;;AACA,WAAO,IAAIqD,KAAJ,CAAU,KAAKC,YAAf,EAA6BtD,KAAK,CAACuD,aAAnC,EAAkDiB,QAAQ,CAAC1E,WAA3D,EAAwE0E,QAAQ,CAAC3E,SAAjF,CAAP;AACD,GA7CH;AAAA;;AAAA,SAgDS4E,KAhDT,GAgDS,eAAMC,cAAN;AACL,KAAU1C,cAAc,CAAC0C,cAAc,CAAC9B,QAAhB,EAA0B,KAAKU,YAA/B,CAAxB,2CAAApG,SAAS,QAA6D,OAA7D,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI,KAAKqG,aAAL,YAA8B5B,KAAlC,EAAyC;AACvC,aAAO,IAAIwB,WAAJ,CAAgB,KAAKI,aAArB,EAAoC,oBAAMpD,QAAN,YAAeuE,cAAc,CAACzB,GAA9B,EAAmClC,QAAvE,CAAP;AACD;;AACD,WAAO4B,cAAc,CAACK,OAAf,CAAuB,oBAAM7C,QAAN,YAAeuE,cAAc,CAACzB,GAA9B,EAAmClC,QAA1D,CAAP;AACD,GAtDH;;AAAA,SAwDST,aAxDT,GAwDS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKoE,QAAL,CAAcrE,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;AACD,GA1DH;;AAAA,SA4DSU,OA5DT,GA4DS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKyD,QAAL,CAAcxD,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;AACD,GA9DH;;AAAA;AAAA;AAAA,SA6BE;AACE,aAAO,IAAIb,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AA/BH;AAAA;AAAA,SAiCE;AACE,iCAAaK,QAAb,YAAsB,KAAKqD,MAA3B;AACD;AAnCH;;AAAA;AAAA,EAA2B5D,QAA3B;;ACWA,IAAIgF,kBAAkB,GAAqE,EAA3F;AAEA,IAAaC,IAAb;AAwBE,gBAAmBC,YAAnB,EAA8CC,YAA9C;AACE,QAAMC,YAAY,GAAGF,YAAY,CAAC1B,KAAb,CAAmBtB,WAAnB,CAA+BiD,YAAY,CAAC3B,KAA5C;AAAA,MACjB,CAAC0B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,SAAKG,cAAL,GAAsB,IAAItD,KAAJ,CACpBqD,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAhB,CAAsBxB,OADF,EAEpBiD,IAAI,CAACtH,UAAL,CAAgByH,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAhC,EAAuC4B,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAvD,CAFoB,EAGpB,EAHoB,EAIpB,KAJoB,EAKpB,UALoB,CAAtB;AAOA,SAAK4B,YAAL,GAAoBA,YAApB;AACD;;AApCH,OAIgBzH,UAJhB,GAIS,oBAAkB2H,MAAlB,EAAiCC,MAAjC;;;AACL,QAAMC,MAAM,GAAGF,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;AAEA,QAAI,wBAAAN,kBAAkB,UAAlB,2FAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAA/B,iFAA0C+H,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAApD,OAAiEgI,SAArE,EAAgF;AAAA;;AAC9ET,MAAAA,kBAAkB,gBACbA,kBADa,6BAEfQ,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAFK,yCAGXuH,kBAHW,yDAGX,qBAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAA/B,CAHW,6BAIb+H,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAJG,IAIOiI,iBAAiB,CACpC1J,eADoC,EAEpC2J,SAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAAX,EAAoB+H,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpCxB,cAHoC,CAJxB,0BAAlB;AAWD;AAED,WAAO+I,kBAAkB,CAACQ,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAAX,CAAlB,CAAsC+H,MAAM,CAAC,CAAD,CAAN,CAAU/H,OAAhD,CAAP;AACD,GAtBH;;AAAA;;AAsCE;;;;AAtCF,SA0CSoI,aA1CT,GA0CS,uBAAcrC,KAAd;AACL,WAAOA,KAAK,CAACvB,MAAN,CAAa,KAAKoC,MAAlB,KAA6Bb,KAAK,CAACvB,MAAN,CAAa,KAAK6D,MAAlB,CAApC;AACD,GA5CH;;AA4DE;;;;AA5DF,SAgESC,OAhET,GAgES,iBAAQvC,KAAR;AACL,KAAU,KAAKqC,aAAL,CAAmBrC,KAAnB,CAAV,2CAAAlG,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,WAAOkG,KAAK,CAACvB,MAAN,CAAa,KAAKoC,MAAlB,IAA4B,KAAK2B,WAAjC,GAA+C,KAAKC,WAA3D;AACD,GAnEH;;AAAA,SA4FSC,SA5FT,GA4FS,mBAAU1C,KAAV;AACL,KAAU,KAAKqC,aAAL,CAAmBrC,KAAnB,CAAV,2CAAAlG,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,WAAOkG,KAAK,CAACvB,MAAN,CAAa,KAAKoC,MAAlB,IAA4B,KAAKC,QAAjC,GAA4C,KAAKC,QAAxD;AACD,GA/FH;;AAAA,SAiGS4B,eAjGT,GAiGS,yBAAgBC,WAAhB;AACL,KAAU,KAAKP,aAAL,CAAmBO,WAAW,CAAC5C,KAA/B,CAAV,2CAAAlG,SAAS,QAAwC,OAAxC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAInB,IAAI,CAACmE,KAAL,CAAW,KAAKgE,QAAL,CAAcjB,GAAzB,EAA8BhH,IAA9B,KAAuCF,IAAI,CAACmE,KAAL,CAAW,KAAKiE,QAAL,CAAclB,GAAzB,EAA8BhH,IAA9B,CAA3C,EAAgF;AAC9E,YAAM,IAAIf,yBAAJ,EAAN;AACD;;AACD,QAAM+K,YAAY,GAAG,KAAKH,SAAL,CAAeE,WAAW,CAAC5C,KAA3B,CAArB;AACA,QAAM8C,aAAa,GAAG,KAAKJ,SAAL,CAAeE,WAAW,CAAC5C,KAAZ,CAAkBvB,MAAlB,CAAyB,KAAKoC,MAA9B,IAAwC,KAAKyB,MAA7C,GAAsD,KAAKzB,MAA1E,CAAtB;AACA,QAAMkC,kBAAkB,GAAGpK,IAAI,CAACoE,QAAL,CAAc6F,WAAW,CAAC/C,GAA1B,EAA+BzG,IAA/B,CAA3B;AACA,QAAMqD,SAAS,GAAG9D,IAAI,CAACoE,QAAL,CAAcgG,kBAAd,EAAkCD,aAAa,CAACjD,GAAhD,CAAlB;AACA,QAAMnD,WAAW,GAAG/D,IAAI,CAACmC,GAAL,CAASnC,IAAI,CAACoE,QAAL,CAAc8F,YAAY,CAAChD,GAA3B,EAAgCxG,KAAhC,CAAT,EAAiD0J,kBAAjD,CAApB;AACA,QAAMC,YAAY,GAAG,IAAIjD,WAAJ,CACnB6C,WAAW,CAAC5C,KAAZ,CAAkBvB,MAAlB,CAAyB,KAAKoC,MAA9B,IAAwC,KAAKyB,MAA7C,GAAsD,KAAKzB,MADxC,EAEnBlI,IAAI,CAACoC,MAAL,CAAY0B,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;AAIA,QAAI/D,IAAI,CAACmE,KAAL,CAAWkG,YAAY,CAACnD,GAAxB,EAA6BhH,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAIT,4BAAJ,EAAN;AACD;;AACD,WAAO,CAAC4K,YAAD,EAAe,IAAIvB,IAAJ,CAASoB,YAAY,CAAC/H,GAAb,CAAiB8H,WAAjB,CAAT,EAAwCE,aAAa,CAAC9F,QAAd,CAAuBgG,YAAvB,CAAxC,CAAf,CAAP;AACD,GAnHH;;AAAA,SAqHSC,cArHT,GAqHS,wBAAeD,YAAf;AACL,KAAU,KAAKX,aAAL,CAAmBW,YAAY,CAAChD,KAAhC,CAAV,2CAAAlG,SAAS,QAAyC,OAAzC,CAAT,GAAAA,SAAS,OAAT;;AACA,QACEnB,IAAI,CAACmE,KAAL,CAAW,KAAKgE,QAAL,CAAcjB,GAAzB,EAA8BhH,IAA9B,KACAF,IAAI,CAACmE,KAAL,CAAW,KAAKiE,QAAL,CAAclB,GAAzB,EAA8BhH,IAA9B,CADA,IAEAF,IAAI,CAACkB,kBAAL,CAAwBmJ,YAAY,CAACnD,GAArC,EAA0C,KAAK6C,SAAL,CAAeM,YAAY,CAAChD,KAA5B,EAAmCH,GAA7E,CAHF,EAIE;AACA,YAAM,IAAI/H,yBAAJ,EAAN;AACD;AAED,QAAMgL,aAAa,GAAG,KAAKJ,SAAL,CAAeM,YAAY,CAAChD,KAA5B,CAAtB;AACA,QAAM6C,YAAY,GAAG,KAAKH,SAAL,CAAeM,YAAY,CAAChD,KAAb,CAAmBvB,MAAnB,CAA0B,KAAKoC,MAA/B,IAAyC,KAAKyB,MAA9C,GAAuD,KAAKzB,MAA3E,CAArB;AACA,QAAMpE,SAAS,GAAG9D,IAAI,CAACoE,QAAL,CAAcpE,IAAI,CAACoE,QAAL,CAAc8F,YAAY,CAAChD,GAA3B,EAAgCmD,YAAY,CAACnD,GAA7C,CAAd,EAAiExG,KAAjE,CAAlB;AACA,QAAMqD,WAAW,GAAG/D,IAAI,CAACoE,QAAL,CAAcpE,IAAI,CAACqE,QAAL,CAAc8F,aAAa,CAACjD,GAA5B,EAAiCmD,YAAY,CAACnD,GAA9C,CAAd,EAAkEzG,IAAlE,CAApB;AACA,QAAMwJ,WAAW,GAAG,IAAI7C,WAAJ,CAClBiD,YAAY,CAAChD,KAAb,CAAmBvB,MAAnB,CAA0B,KAAKoC,MAA/B,IAAyC,KAAKyB,MAA9C,GAAuD,KAAKzB,MAD1C,EAElBlI,IAAI,CAACmC,GAAL,CAASnC,IAAI,CAACoC,MAAL,CAAY0B,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C5D,GAA9C,CAFkB,CAApB;AAIA,WAAO,CAAC8J,WAAD,EAAc,IAAInB,IAAJ,CAASoB,YAAY,CAAC/H,GAAb,CAAiB8H,WAAjB,CAAT,EAAwCE,aAAa,CAAC9F,QAAd,CAAuBgG,YAAvB,CAAxC,CAAd,CAAP;AACD,GAxIH;;AAAA,SA0ISE,kBA1IT,GA0IS,4BACLC,WADK,EAELzB,YAFK,EAGLC,YAHK;AAKL,KAAUwB,WAAW,CAACnD,KAAZ,CAAkBvB,MAAlB,CAAyB,KAAKoD,cAA9B,CAAV,2CAAA/H,SAAS,QAAgD,WAAhD,CAAT,GAAAA,SAAS,OAAT;AACA,QAAM8H,YAAY,GAAGF,YAAY,CAAC1B,KAAb,CAAmBtB,WAAnB,CAA+BiD,YAAY,CAAC3B,KAA5C;AAAA,MACjB,CAAC0B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,MAAUE,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAhB,CAAsBvB,MAAtB,CAA6B,KAAKoC,MAAlC,KAA6Ce,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAhB,CAAsBvB,MAAtB,CAA6B,KAAK6D,MAAlC,CAAvD,4CAAAxI,SAAS,QAAyF,OAAzF,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAIsJ,SAAJ;;AACA,QAAIzK,IAAI,CAACmE,KAAL,CAAWqG,WAAW,CAACtD,GAAvB,EAA4BhH,IAA5B,CAAJ,EAAuC;AACrCuK,MAAAA,SAAS,GAAGzK,IAAI,CAACqE,QAAL,CAAcvC,IAAI,CAAC9B,IAAI,CAACoE,QAAL,CAAc6E,YAAY,CAAC,CAAD,CAAZ,CAAgB/B,GAA9B,EAAmC+B,YAAY,CAAC,CAAD,CAAZ,CAAgB/B,GAAnD,CAAD,CAAlB,EAA6EnH,iBAA7E,CAAZ;AACD,KAFD,MAEO;AACL,UAAM2K,OAAO,GAAG1K,IAAI,CAACoC,MAAL,CAAYpC,IAAI,CAACoE,QAAL,CAAc6E,YAAY,CAAC,CAAD,CAAZ,CAAgB/B,GAA9B,EAAmCsD,WAAW,CAACtD,GAA/C,CAAZ,EAAiE,KAAKiB,QAAL,CAAcjB,GAA/E,CAAhB;AACA,UAAMyD,OAAO,GAAG3K,IAAI,CAACoC,MAAL,CAAYpC,IAAI,CAACoE,QAAL,CAAc6E,YAAY,CAAC,CAAD,CAAZ,CAAgB/B,GAA9B,EAAmCsD,WAAW,CAACtD,GAA/C,CAAZ,EAAiE,KAAKkB,QAAL,CAAclB,GAA/E,CAAhB;AACAuD,MAAAA,SAAS,GAAGzK,IAAI,CAACoB,eAAL,CAAqBsJ,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;AACD;;AACD,QAAI,CAAC3K,IAAI,CAACkC,WAAL,CAAiBuI,SAAjB,EAA4BvK,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAIT,4BAAJ,EAAN;AACD;AACD,WAAO,IAAI2H,WAAJ,CAAgB,KAAK8B,cAArB,EAAqCuB,SAArC,CAAP;AACD,GAjKH;;AAAA,SAmKSG,iBAnKT,GAmKS,2BACLvD,KADK,EAELmD,WAFK,EAGLC,SAHK,EAILI,KAJK,EAKLC,KALK;QAILD;AAAAA,MAAAA,QAAiB;;;AAGjB,KAAU,KAAKnB,aAAL,CAAmBrC,KAAnB,CAAV,2CAAAlG,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,KAAUqJ,WAAW,CAACnD,KAAZ,CAAkBvB,MAAlB,CAAyB,KAAKoD,cAA9B,CAAV,2CAAA/H,SAAS,QAAgD,cAAhD,CAAT,GAAAA,SAAS,OAAT;AACA,KAAUsJ,SAAS,CAACpD,KAAV,CAAgBvB,MAAhB,CAAuB,KAAKoD,cAA5B,CAAV,2CAAA/H,SAAS,QAA8C,WAA9C,CAAT,GAAAA,SAAS,OAAT;AACA,KAAUnB,IAAI,CAACoB,eAAL,CAAqBqJ,SAAS,CAACvD,GAA/B,EAAoCsD,WAAW,CAACtD,GAAhD,CAAV,2CAAA/F,SAAS,QAAuD,WAAvD,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAI4J,mBAAJ;;AACA,QAAI,CAACF,KAAL,EAAY;AACVE,MAAAA,mBAAmB,GAAGP,WAAtB;AACD,KAFD,MAEO;AACL,OAAU,CAAC,CAACM,KAAZ,2CAAA3J,SAAS,QAAU,QAAV,CAAT,GAAAA,SAAS,OAAT;AACA,UAAM6J,WAAW,GAAGrJ,cAAc,CAACmJ,KAAD,CAAlC;;AACA,UAAI,CAAC9K,IAAI,CAACmE,KAAL,CAAW6G,WAAX,EAAwB9K,IAAxB,CAAL,EAAoC;AAClC,YAAM+K,KAAK,GAAGnJ,IAAI,CAAC9B,IAAI,CAACoE,QAAL,CAAc,KAAK+D,QAAL,CAAcjB,GAA5B,EAAiC,KAAKkB,QAAL,CAAclB,GAA/C,CAAD,CAAlB;AACA,YAAMgE,SAAS,GAAGpJ,IAAI,CAACkJ,WAAD,CAAtB;;AACA,YAAIhL,IAAI,CAACkC,WAAL,CAAiB+I,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;AACtC,cAAMpH,SAAS,GAAG9D,IAAI,CAACoE,QAAL,CAAcoG,WAAW,CAACtD,GAA1B,EAA+BlH,IAAI,CAACqE,QAAL,CAAc4G,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;AACA,cAAMnH,WAAW,GAAG/D,IAAI,CAACmC,GAAL,CAASnC,IAAI,CAACoE,QAAL,CAAc6G,KAAd,EAAqB3K,IAArB,CAAT,EAAqC4K,SAArC,CAApB;AACA,cAAMC,YAAY,GAAGnL,IAAI,CAACoC,MAAL,CAAY0B,SAAZ,EAAuBC,WAAvB,CAArB;AACAgH,UAAAA,mBAAmB,GAAGP,WAAW,CAACrI,GAAZ,CAAgB,IAAIiF,WAAJ,CAAgB,KAAK8B,cAArB,EAAqCiC,YAArC,CAAhB,CAAtB;AACD,SALD,MAKO;AACLJ,UAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF,OAXD,MAWO;AACLO,QAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF;AAED,WAAO,IAAIpD,WAAJ,CACLC,KADK,EAELrH,IAAI,CAACoC,MAAL,CAAYpC,IAAI,CAACoE,QAAL,CAAcqG,SAAS,CAACvD,GAAxB,EAA6B,KAAK6C,SAAL,CAAe1C,KAAf,EAAsBH,GAAnD,CAAZ,EAAqE6D,mBAAmB,CAAC7D,GAAzF,CAFK,CAAP;AAID,GAzMH;;AAAA;AAAA;AAAA;AA8CE;;;AAGA;AACE,aAAO,IAAII,KAAJ,CAAU,KAAKY,MAAf,EAAuB,KAAKyB,MAA5B,EAAoC,KAAKV,YAAL,CAAkB,CAAlB,EAAqB/B,GAAzD,EAA8D,KAAK+B,YAAL,CAAkB,CAAlB,EAAqB/B,GAAnF,CAAP;AACD;AAnDH;AAAA;AAAA;AAqDE;;;AAGA;AACE,aAAO,IAAII,KAAJ,CAAU,KAAKqC,MAAf,EAAuB,KAAKzB,MAA5B,EAAoC,KAAKe,YAAL,CAAkB,CAAlB,EAAqB/B,GAAzD,EAA8D,KAAK+B,YAAL,CAAkB,CAAlB,EAAqB/B,GAAnF,CAAP;AACD;AA1DH;AAAA;AAAA;AAqEE;;;AAGA;AACE,aAAO,KAAKgB,MAAL,CAAYrC,OAAnB;AACD;AA1EH;AAAA;AAAA,SA4EE;AACE,aAAO,KAAKoD,YAAL,CAAkB,CAAlB,EAAqB5B,KAA5B;AACD;AA9EH;AAAA;AAAA,SAgFE;AACE,aAAO,KAAK4B,YAAL,CAAkB,CAAlB,EAAqB5B,KAA5B;AACD;AAlFH;AAAA;AAAA,SAoFE;AACE,aAAO,KAAK4B,YAAL,CAAkB,CAAlB,CAAP;AACD;AAtFH;AAAA;AAAA,SAwFE;AACE,aAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;AACD;AA1FH;;AAAA;AAAA;;;ACZA,IAAImC,oBAAoB,sDACrB1L,OAAO,CAAC2G,OADa,IACH;AACjB,gDAA8C,CAD7B;;AAAA,CADG,wBAAxB;AAMA;;;;AAGA,IAAsBgF,OAAtB;AACE;;;AAGA;;AAEA;;;;;;;;AANF,UAcsBC,cAdtB,2BAeIzF,OAfJ,EAgBIvE,OAhBJ,EAiBIiK,QAjBJ,EAkBI7F,MAlBJ,EAmBItG,IAnBJ;AAAA;;;mCAqBUoM;AAaN,eAAO,IAAI5F,KAAJ,CAAUC,OAAV,EAAmBvE,OAAnB,EAA4BkK,cAA5B,EAA4C9F,MAA5C,EAAoDtG,IAApD,CAAP;;;UAjBAmM,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAAC7F,OAAD,CAAX;;mBAK3B,kCAAOuF,oBAAP,qFAAO,uBAAuBvF,OAAvB,CAAP,2DAAO,uBAAkCvE,OAAlC,CAAP,MAAsD;;6CAClD8J,oBAAoB,CAACvF,OAAD,CAApB,CAA8BvE,OAA9B,qBACM,IAAIqK,QAAJ,CAAarK,OAAb,EAAsBsK,KAAtB,EAA6BL,QAA7B,EAAuC9F,QAAvC,GAAkDoG,IAAlD,CAAuD,UAACpG,QAAD;;;AAC3D2F,QAAAA,oBAAoB,gBACfA,oBADe,6BAEjBvF,OAFiB,2CAGbuF,oBAHa,2DAGb,uBAAuBvF,OAAvB,CAHa,6BAIfvE,OAJe,IAILmE,QAJK,0BAApB;AAOA,eAAOA,QAAP;AACD,OATK;AAWb,KAnCH;AAAA;AAAA;AAAA;;AAqCE;;;;;;AArCF,UA2CsBqG,aA3CtB,0BA4CI3C,MA5CJ,EA6CIC,MA7CJ,EA8CImC,QA9CJ;AAAA;UA8CIA,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACvC,MAAM,CAACtD,OAAR,CAAX;AAE7B,QAAUsD,MAAM,CAACtD,OAAP,KAAmBuD,MAAM,CAACvD,OAApC,4CAAA1E,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;AACA,UAAMG,OAAO,GAAGwH,IAAI,CAACtH,UAAL,CAAgB2H,MAAhB,EAAwBC,MAAxB,CAAhB;6BACqC,IAAIuC,QAAJ,CAAarK,OAAb,EAAsByK,aAAa,CAACC,GAApC,EAAyCT,QAAzC,EAAmDU,WAAnD;YAA9BC;YAAWC;AAClB,YAAMC,QAAQ,GAAGjD,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAAC8C,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;AACA,eAAO,IAAIpD,IAAJ,CAAS,IAAI1B,WAAJ,CAAgB+B,MAAhB,EAAwBiD,QAAQ,CAAC,CAAD,CAAhC,CAAT,EAA+C,IAAIhF,WAAJ,CAAgBgC,MAAhB,EAAwBgD,QAAQ,CAAC,CAAD,CAAhC,CAA/C,CAAP;;AACD,KArDH;AAAA;AAAA;AAAA;;AAAA;AAAA;;ACjBA,IAAMC,YAAY,gBAAG,IAAIxI,QAAJ,CAAarD,IAAb,CAArB;;AAEA,IAAa8L,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACS/H,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKJ,QAAL,CAAciI,YAAd,EAA4B9H,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAHH;;AAAA,SAKSU,OALT,GAKS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKf,QAAL,CAAciI,YAAd,EAA4BjH,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GAPH;;AAAA;AAAA,EAA6Bb,QAA7B;;ICEa0I,KAAb;AAOE,iBAAmB1E,KAAnB,EAAkC2E,KAAlC,EAAmDC,MAAnD;AACE,MAAU5E,KAAK,CAAClF,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,KACE0G,KAAK,CAAC6E,KAAN,CAAY,UAAA1E,IAAI;AAAA,aAAIA,IAAI,CAACnC,OAAL,KAAiBgC,KAAK,CAAC,CAAD,CAAL,CAAShC,OAA9B;AAAA,KAAhB,CADF,2CAAA1E,SAAS,QAEP,WAFO,CAAT,GAAAA,SAAS,OAAT;AAIA,MACGqL,KAAK,YAAY5G,KAAjB,IAA0BiC,KAAK,CAAC,CAAD,CAAL,CAAS6B,aAAT,CAAuB8C,KAAvB,CAA3B,IACGA,KAAK,KAAK7G,OAAV,IAAqBkC,KAAK,CAAC,CAAD,CAAL,CAAS6B,aAAT,CAAuBtD,IAAI,CAACyB,KAAK,CAAC,CAAD,CAAL,CAAShC,OAAV,CAA3B,CAF1B,4CAAA1E,SAAS,QAGP,OAHO,CAAT,GAAAA,SAAS,OAAT;AAKA,MACE,OAAOsL,MAAP,KAAkB,WAAlB,IACGA,MAAM,YAAY7G,KAAlB,IAA2BiC,KAAK,CAACA,KAAK,CAAClF,MAAN,GAAe,CAAhB,CAAL,CAAwB+G,aAAxB,CAAsC+C,MAAtC,CAD9B,IAEGA,MAAM,KAAK9G,OAAX,IAAsBkC,KAAK,CAACA,KAAK,CAAClF,MAAN,GAAe,CAAhB,CAAL,CAAwB+G,aAAxB,CAAsCtD,IAAI,CAACyB,KAAK,CAAC,CAAD,CAAL,CAAShC,OAAV,CAA1C,CAH3B,4CAAA1E,SAAS,QAIP,QAJO,CAAT,GAAAA,SAAS,OAAT;AAOA,QAAM8G,IAAI,GAAY,CAACuE,KAAK,YAAY5G,KAAjB,GAAyB4G,KAAzB,GAAiCpG,IAAI,CAACyB,KAAK,CAAC,CAAD,CAAL,CAAShC,OAAV,CAAtC,CAAtB;;AACA,yDAAwBgC,KAAK,CAACC,OAAN,EAAxB,wCAAyC;AAAA;AAAA,UAA7BC,CAA6B;AAAA,UAA1BC,IAA0B;AACvC,UAAM2E,YAAY,GAAG1E,IAAI,CAACF,CAAD,CAAzB;AACA,QAAU4E,YAAY,CAAC7G,MAAb,CAAoBkC,IAAI,CAACE,MAAzB,KAAoCyE,YAAY,CAAC7G,MAAb,CAAoBkC,IAAI,CAAC2B,MAAzB,CAA9C,4CAAAxI,SAAS,QAAuE,MAAvE,CAAT,GAAAA,SAAS,OAAT;;AACA,UAAMsL,OAAM,GAAGE,YAAY,CAAC7G,MAAb,CAAoBkC,IAAI,CAACE,MAAzB,IAAmCF,IAAI,CAAC2B,MAAxC,GAAiD3B,IAAI,CAACE,MAArE;;AACAD,MAAAA,IAAI,CAACrF,IAAL,CAAU6J,OAAV;AACD;AAED,SAAK5E,KAAL,GAAaA,KAAb;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAK2E,QAAL,GAAgBtF,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;AACA,SAAK8E,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwBxE,IAAI,CAACA,IAAI,CAACtF,MAAL,GAAc,CAAf,CAA5B;AACD;;AAtCH;AAAA;AAAA,SAwCE;AACE,aAAO,KAAKkF,KAAL,CAAW,CAAX,EAAchC,OAArB;AACD;AA1CH;;AAAA;AAAA;;ACOA;;;;;;;AAMA,SAASgH,kBAAT,CAA4BD,QAA5B,EAA6C3C,WAA7C,EAA0EI,YAA1E;AACE,MAAMyC,UAAU,GAAGF,QAAQ,CAAC1F,GAAT,CAAa9C,QAAb,CAAsB6F,WAAW,CAAC/C,GAAlC,CAAnB;;AAEA,MAAM6F,QAAQ,GAAGD,UAAU,CAACzI,QAAX,CAAoBgG,YAAY,CAACnD,GAAjC,EAAsC9E,MAAtC,CAA6C0K,UAA7C,CAAjB;AACA,SAAO,IAAIR,OAAJ,CAAYS,QAAQ,CAACjJ,SAArB,EAAgCiJ,QAAQ,CAAChJ,WAAzC,CAAP;AACD;AASD;;AACA,SAAgBiJ,sBAAsBC,GAAgBC;AACpD;AACA,GAAUjH,cAAc,CAACgH,CAAC,CAAChD,WAAF,CAAcpD,QAAf,EAAyBqG,CAAC,CAACjD,WAAF,CAAcpD,QAAvC,CAAxB,2CAAA1F,SAAS,QAAiE,gBAAjE,CAAT,GAAAA,SAAS,OAAT;AACA,GAAU8E,cAAc,CAACgH,CAAC,CAAC5C,YAAF,CAAexD,QAAhB,EAA0BqG,CAAC,CAAC7C,YAAF,CAAexD,QAAzC,CAAxB,2CAAA1F,SAAS,QAAmE,iBAAnE,CAAT,GAAAA,SAAS,OAAT;;AACA,MAAI8L,CAAC,CAAC5C,YAAF,CAAe/F,OAAf,CAAuB4I,CAAC,CAAC7C,YAAzB,CAAJ,EAA4C;AAC1C,QAAI4C,CAAC,CAAChD,WAAF,CAAc3F,OAAd,CAAsB4I,CAAC,CAACjD,WAAxB,CAAJ,EAA0C;AACxC,aAAO,CAAP;AACD;;AAED,QAAIgD,CAAC,CAAChD,WAAF,CAAc5H,QAAd,CAAuB6K,CAAC,CAACjD,WAAzB,CAAJ,EAA2C;AACzC,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAIgD,CAAC,CAAC5C,YAAF,CAAehI,QAAf,CAAwB6K,CAAC,CAAC7C,YAA1B,CAAJ,EAA6C;AAC3C,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF;AACF;AAAA;AAGD,SAAgB8C,gBAAgBF,GAAUC;AACxC,MAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;AACA,MAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOA,MAAP;AACD;;AAGD,MAAIH,CAAC,CAACI,WAAF,CAAchL,QAAd,CAAuB6K,CAAC,CAACG,WAAzB,CAAJ,EAA2C;AACzC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIJ,CAAC,CAACI,WAAF,CAAcnL,WAAd,CAA0BgL,CAAC,CAACG,WAA5B,CAAJ,EAA8C;AACnD,WAAO,CAAP;AACD;;AAGD,SAAOJ,CAAC,CAACtF,KAAF,CAAQM,IAAR,CAAatF,MAAb,GAAsBuK,CAAC,CAACvF,KAAF,CAAQM,IAAR,CAAatF,MAA1C;AACD;AAAA,AASD;;;;;;AAKA,SAAS2K,aAAT,CAAuB3E,cAAvB,EAAuD9C,OAAvD;AACE,MAAI8C,cAAc,YAAYvB,WAA9B,EAA2C,OAAOuB,cAAP;AAC3C,MAAIA,cAAc,CAAC9B,QAAf,KAA4BlB,OAAhC,EAAyC,OAAO,IAAIyB,WAAJ,CAAgBhB,IAAI,CAACP,OAAD,CAApB,EAA+B8C,cAAc,CAACzB,GAA9C,CAAP;AACzC,2CAAA/F,SAAS,QAAQ,UAAR,CAAT,GAAAA,SAAS,OAAT;AACD;;AAED,SAASoM,eAAT,CAAyB1G,QAAzB,EAA6ChB,OAA7C;AACE,MAAIgB,QAAQ,YAAYjB,KAAxB,EAA+B,OAAOiB,QAAP;AAC/B,MAAIA,QAAQ,KAAKlB,OAAjB,EAA0B,OAAOS,IAAI,CAACP,OAAD,CAAX;AAC1B,2CAAA1E,SAAS,QAAQ,UAAR,CAAT,GAAAA,SAAS,OAAT;AACD;AAED;;;;;AAIA,IAAaqM,KAAb;AAgDE,iBAAmB7F,KAAnB,EAAiCb,MAAjC,EAAyD2G,SAAzD;AACE,QAAMC,OAAO,GAAkB,IAAIC,KAAJ,CAAUhG,KAAK,CAACM,IAAN,CAAWtF,MAArB,CAA/B;AACA,QAAMiL,SAAS,GAAW,IAAID,KAAJ,CAAUhG,KAAK,CAACE,KAAN,CAAYlF,MAAtB,CAA1B;;AACA,QAAI8K,SAAS,KAAK9N,SAAS,CAACkO,WAA5B,EAAyC;AACvC,OAAU5H,cAAc,CAACa,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAAC6E,KAAxB,CAAxB,2CAAArL,SAAS,QAA+C,OAA/C,CAAT,GAAAA,SAAS,OAAT;AACAuM,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaJ,aAAa,CAACxG,MAAD,EAASa,KAAK,CAAC9B,OAAf,CAA1B;;AACA,WAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWtF,MAAX,GAAoB,CAAxC,EAA2CoF,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,CAAZ,CAAb;;AACA,oCAAiCC,IAAI,CAACgC,eAAL,CAAqB0D,OAAO,CAAC3F,CAAD,CAA5B,CAAjC;AAAA,YAAOsC,YAAP;AAAA,YAAqByD,QAArB;;AACAJ,QAAAA,OAAO,CAAC3F,CAAC,GAAG,CAAL,CAAP,GAAiBsC,YAAjB;AACAuD,QAAAA,SAAS,CAAC7F,CAAD,CAAT,GAAe+F,QAAf;AACD;AACF,KATD,MASO;AACL,OAAU7H,cAAc,CAACa,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAAC8E,MAAxB,CAAxB,2CAAAtL,SAAS,QAAgD,QAAhD,CAAT,GAAAA,SAAS,OAAT;AACAuM,MAAAA,OAAO,CAACA,OAAO,CAAC/K,MAAR,GAAiB,CAAlB,CAAP,GAA8B2K,aAAa,CAACxG,MAAD,EAASa,KAAK,CAAC9B,OAAf,CAA3C;;AACA,WAAK,IAAIkC,EAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWtF,MAAX,GAAoB,CAAjC,EAAoCoF,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;AAC9C,YAAMC,KAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;AACA,mCAAgCC,KAAI,CAACsC,cAAL,CAAoBoD,OAAO,CAAC3F,EAAD,CAA3B,CAAhC;AAAA,YAAOkC,WAAP;AAAA,YAAoB6D,SAApB;;AACAJ,QAAAA,OAAO,CAAC3F,EAAC,GAAG,CAAL,CAAP,GAAiBkC,WAAjB;AACA2D,QAAAA,SAAS,CAAC7F,EAAC,GAAG,CAAL,CAAT,GAAmB+F,SAAnB;AACD;AACF;AAED,SAAKnG,KAAL,GAAaA,KAAb;AACA,SAAK8F,SAAL,GAAiBA,SAAjB;AACA,SAAKxD,WAAL,GACEwD,SAAS,KAAK9N,SAAS,CAACkO,WAAxB,GACI/G,MADJ,GAEIa,KAAK,CAAC6E,KAAN,KAAgB7G,OAAhB,GACAiB,cAAc,CAACK,OAAf,CAAuByG,OAAO,CAAC,CAAD,CAAP,CAAWxG,GAAlC,CADA,GAEAwG,OAAO,CAAC,CAAD,CALb;AAMA,SAAKrD,YAAL,GACEoD,SAAS,KAAK9N,SAAS,CAACoO,YAAxB,GACIjH,MADJ,GAEIa,KAAK,CAAC8E,MAAN,KAAiB9G,OAAjB,GACAiB,cAAc,CAACK,OAAf,CAAuByG,OAAO,CAACA,OAAO,CAAC/K,MAAR,GAAiB,CAAlB,CAAP,CAA4BuE,GAAnD,CADA,GAEAwG,OAAO,CAACA,OAAO,CAAC/K,MAAR,GAAiB,CAAlB,CALb;AAMA,SAAKqL,cAAL,GAAsB,IAAI1G,KAAJ,CACpB,KAAK2C,WAAL,CAAiBpD,QADG,EAEpB,KAAKwD,YAAL,CAAkBxD,QAFE,EAGpB,KAAKoD,WAAL,CAAiB/C,GAHG,EAIpB,KAAKmD,YAAL,CAAkBnD,GAJE,CAAtB;AAMA,SAAK+G,YAAL,GAAoB3G,KAAK,CAACI,SAAN,CAAgB,IAAI6E,KAAJ,CAAUqB,SAAV,EAAqBjG,KAAK,CAAC6E,KAA3B,CAAhB,CAApB;AACA,SAAKa,WAAL,GAAmBR,kBAAkB,CAAClF,KAAK,CAACiF,QAAP,EAAiB,KAAK3C,WAAtB,EAAmC,KAAKI,YAAxC,CAArC;AACD;AA/DD;;;;;;;AA9BF,QAmCgB6D,OAnChB,GAmCS,iBAAevG,KAAf,EAA6BwG,QAA7B;AACL,WAAO,IAAIX,KAAJ,CAAU7F,KAAV,EAAiBwG,QAAjB,EAA2BxO,SAAS,CAACkO,WAArC,CAAP;AACD,GArCH;;AAuCE;;;;;AAvCF,QA4CgBO,QA5ChB,GA4CS,kBAAgBzG,KAAhB,EAA8B0G,SAA9B;AACL,WAAO,IAAIb,KAAJ,CAAU7F,KAAV,EAAiB0G,SAAjB,EAA4B1O,SAAS,CAACoO,YAAtC,CAAP;AACD,GA9CH;;AAAA;;AA+FE;;;;AA/FF,SAmGSO,gBAnGT,GAmGS,0BAAiBC,iBAAjB;AACL,KAAU,CAACA,iBAAiB,CAAClM,QAAlB,CAA2BnC,IAA3B,CAAX,2CAAAiB,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI,KAAKsM,SAAL,KAAmB9N,SAAS,CAACoO,YAAjC,EAA+C;AAC7C,aAAO,KAAK1D,YAAZ;AACD,KAFD,MAEO;AACL,UAAMmE,yBAAyB,GAAG,IAAI3K,QAAJ,CAAa1D,GAAb,EAC/BgC,GAD+B,CAC3BoM,iBAD2B,EAE/BvK,MAF+B,GAG/BI,QAH+B,CAGtB,KAAKiG,YAAL,CAAkBnD,GAHI,EAGClC,QAHnC;AAIA,aAAO,KAAKqF,YAAL,YAA6BjD,WAA7B,GACH,IAAIA,WAAJ,CAAgB,KAAKiD,YAAL,CAAkBhD,KAAlC,EAAyCmH,yBAAzC,CADG,GAEH5H,cAAc,CAACK,OAAf,CAAuBuH,yBAAvB,CAFJ;AAGD;AACF,GAhHH;;AAkHE;;;;AAlHF,SAsHSC,eAtHT,GAsHS,yBAAgBF,iBAAhB;AACL,KAAU,CAACA,iBAAiB,CAAClM,QAAlB,CAA2BnC,IAA3B,CAAX,2CAAAiB,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI,KAAKsM,SAAL,KAAmB9N,SAAS,CAACkO,WAAjC,EAA8C;AAC5C,aAAO,KAAK5D,WAAZ;AACD,KAFD,MAEO;AACL,UAAMyE,wBAAwB,GAAG,IAAI7K,QAAJ,CAAa1D,GAAb,EAAkBgC,GAAlB,CAAsBoM,iBAAtB,EAAyCnK,QAAzC,CAAkD,KAAK6F,WAAL,CAAiB/C,GAAnE,EAAwElC,QAAzG;AACA,aAAO,KAAKiF,WAAL,YAA4B7C,WAA5B,GACH,IAAIA,WAAJ,CAAgB,KAAK6C,WAAL,CAAiB5C,KAAjC,EAAwCqH,wBAAxC,CADG,GAEH9H,cAAc,CAACK,OAAf,CAAuByH,wBAAvB,CAFJ;AAGD;AACF,GAhIH;;AAkIE;;;;;;;;;;;;;;AAlIF,QAgJgBC,gBAhJhB,GAgJS,0BACL9G,KADK,EAEL+G,gBAFK,EAGLC,WAHK;AAMLC,EAAAA,YANK,EAOLC,gBAPK,EAQLC,UARK;kCAIkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBC;AAAAA,MAAAA,mBAAmCH;;;QACnCI;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUnH,KAAK,CAAClF,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU+N,OAAO,GAAG,CAApB,4CAAA/N,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU4N,gBAAgB,KAAKH,gBAArB,IAAyCE,YAAY,CAACnM,MAAb,GAAsB,CAAzE,4CAAAxB,SAAS,QAAmE,mBAAnE,CAAT,GAAAA,SAAS,OAAT;AACA,QAAM0E,OAAO,GACX+I,gBAAgB,YAAYxH,WAA5B,GACIwH,gBAAgB,CAACvH,KAAjB,CAAuBxB,OAD3B,GAEIgJ,WAAW,YAAYjJ,KAAvB,GACAiJ,WAAW,CAAChJ,OADZ,GAEAyD,SALN;AAMA,MAAUzD,OAAO,KAAKyD,SAAtB,4CAAAnI,SAAS,QAAwB,UAAxB,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMgN,QAAQ,GAAGb,aAAa,CAACsB,gBAAD,EAAmB/I,OAAnB,CAA9B;AACA,QAAMsJ,QAAQ,GAAG5B,eAAe,CAACsB,WAAD,EAAchJ,OAAd,CAAhC;;AACA,SAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAClF,MAA1B,EAAkCoF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAYpC,MAAZ,CAAmBqI,QAAQ,CAAC9G,KAA5B,CAAD,IAAuC,CAACW,IAAI,CAAC2B,MAAL,CAAY7D,MAAZ,CAAmBqI,QAAQ,CAAC9G,KAA5B,CAA5C,EAAgF;AAChF,UAAIW,IAAI,CAACG,QAAL,CAAc7D,OAAd,CAAsBpE,IAAtB,KAA+B8H,IAAI,CAACI,QAAL,CAAc9D,OAAd,CAAsBpE,IAAtB,CAAnC,EAAgE;AAEhE,UAAImO,SAAsB,SAA1B;;AACA,UAAI;AACF;;AADE,qCACarG,IAAI,CAACgC,eAAL,CAAqBmE,QAArB,CADb;;AACAE,QAAAA,SADA;AAEH,OAFD,CAEE,OAAO3M,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAAC0N,8BAAV,EAA0C;AACxC;AACD;;AACD,cAAM1N,KAAN;AACD,OAfoC;;;AAiBrC,UAAI2M,SAAS,CAAChH,KAAV,CAAgBvB,MAAhB,CAAuBqJ,QAAvB,CAAJ,EAAsC;AACpC5M,QAAAA,YAAY,CACVyM,UADU,EAEV,IAAIxB,KAAJ,CACE,IAAIjB,KAAJ,WAAcuC,YAAd,GAA4B9G,IAA5B,IAAmC+G,gBAAgB,CAAClI,QAApD,EAA8DgI,WAA9D,CADF,EAEEE,gBAFF,EAGEpP,SAAS,CAACkO,WAHZ,CAFU,EAOVoB,aAPU,EAQV9B,eARU,CAAZ;AAUD,OAXD,MAWO,IAAI+B,OAAO,GAAG,CAAV,IAAerH,KAAK,CAAClF,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM0M,sBAAsB,GAAGxH,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBuH,MAAlB,CAAyBzH,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAClF,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C6K,QAAAA,KAAK,CAACmB,gBAAN,CACEU,sBADF,EAEEhB,SAFF,EAGEQ,WAHF,EAIE;AACEI,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,YAQMJ,YARN,GAQoB9G,IARpB,IASE+G,gBATF,EAUEC,UAVF;AAYD;AACF;AAED,WAAOA,UAAP;AACD,GAvNH;;AAyNE;;;;;;;;;;;;;;;AAzNF,QAwOgBO,iBAxOhB,GAwOS,2BACL1H,KADK,EAEL2H,UAFK,EAGLC,iBAHK;AAMLX,EAAAA,YANK,EAOLY,iBAPK,EAQLV,UARK;oCAIkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBY;AAAAA,MAAAA,oBAAoCD;;;QACpCT;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUnH,KAAK,CAAClF,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU+N,OAAO,GAAG,CAApB,4CAAA/N,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;AACA,MAAUuO,iBAAiB,KAAKD,iBAAtB,IAA2CX,YAAY,CAACnM,MAAb,GAAsB,CAA3E,4CAAAxB,SAAS,QAAqE,mBAArE,CAAT,GAAAA,SAAS,OAAT;AACA,QAAM0E,OAAO,GACX4J,iBAAiB,YAAYrI,WAA7B,GACIqI,iBAAiB,CAACpI,KAAlB,CAAwBxB,OAD5B,GAEI2J,UAAU,YAAY5J,KAAtB,GACA4J,UAAU,CAAC3J,OADX,GAEAyD,SALN;AAMA,MAAUzD,OAAO,KAAKyD,SAAtB,4CAAAnI,SAAS,QAAwB,UAAxB,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMkN,SAAS,GAAGf,aAAa,CAACmC,iBAAD,EAAoB5J,OAApB,CAA/B;AACA,QAAM8J,OAAO,GAAGpC,eAAe,CAACiC,UAAD,EAAa3J,OAAb,CAA/B;;AACA,SAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAClF,MAA1B,EAAkCoF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAYpC,MAAZ,CAAmBuI,SAAS,CAAChH,KAA7B,CAAD,IAAwC,CAACW,IAAI,CAAC2B,MAAL,CAAY7D,MAAZ,CAAmBuI,SAAS,CAAChH,KAA7B,CAA7C,EAAkF;AAClF,UAAIW,IAAI,CAACG,QAAL,CAAc7D,OAAd,CAAsBpE,IAAtB,KAA+B8H,IAAI,CAACI,QAAL,CAAc9D,OAAd,CAAsBpE,IAAtB,CAAnC,EAAgE;AAEhE,UAAIiO,QAAqB,SAAzB;;AACA,UAAI;AACF;;AADE,oCACYnG,IAAI,CAACsC,cAAL,CAAoB+D,SAApB,CADZ;;AACAF,QAAAA,QADA;AAEH,OAFD,CAEE,OAAOzM,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAACkO,2BAAV,EAAuC;AACrC;AACD;;AACD,cAAMlO,KAAN;AACD,OAfoC;;;AAiBrC,UAAIyM,QAAQ,CAAC9G,KAAT,CAAevB,MAAf,CAAsB6J,OAAtB,CAAJ,EAAoC;AAClCpN,QAAAA,YAAY,CACVyM,UADU,EAEV,IAAIxB,KAAJ,CACE,IAAIjB,KAAJ,EAAWvE,IAAX,SAAoB8G,YAApB,GAAmCU,UAAnC,EAA+CE,iBAAiB,CAAC7I,QAAjE,CADF,EAEE6I,iBAFF,EAGE/P,SAAS,CAACoO,YAHZ,CAFU,EAOVkB,aAPU,EAQV9B,eARU,CAAZ;AAUD,OAXD,MAWO,IAAI+B,OAAO,GAAG,CAAV,IAAerH,KAAK,CAAClF,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM0M,sBAAsB,GAAGxH,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBuH,MAAlB,CAAyBzH,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAClF,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C6K,QAAAA,KAAK,CAAC+B,iBAAN,CACEF,sBADF,EAEEG,UAFF,EAGErB,QAHF,EAIE;AACEc,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,GAQGlH,IARH,SAQY8G,YARZ,GASEY,iBATF,EAUEV,UAVF;AAYD;AACF;AAED,WAAOA,UAAP;AACD,GA/SH;;AAAA;AAAA;;AClDA,SAASa,KAAT,CAAelH,cAAf;AACE,gBAAYA,cAAc,CAACzB,GAAf,CAAmBrF,QAAnB,CAA4B,EAA5B,CAAZ;AACD;AAED,IAAMiO,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;AACE;;;AAGA;;AACA;;;;;AALF,SAUgBC,kBAVhB,GAUS,4BAA0BC,KAA1B,EAAwCC,OAAxC;AACL,QAAMC,SAAS,GAAGF,KAAK,CAAChG,WAAN,CAAkBpD,QAAlB,KAA+BlB,OAAjD;AACA,QAAMyK,UAAU,GAAGH,KAAK,CAAC5F,YAAN,CAAmBxD,QAAnB,KAAgClB,OAAnD;;AAEA,KAAU,EAAEwK,SAAS,IAAIC,UAAf,CAAV,2CAAAjP,SAAS,QAA6B,gBAA7B,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,EAAE,SAAS+O,OAAX,KAAuBA,OAAO,CAACG,GAAR,GAAc,CAA/C,4CAAAlP,SAAS,QAAyC,KAAzC,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMmP,EAAE,GAAWjP,uBAAuB,CAAC6O,OAAO,CAACK,SAAT,CAA1C;AACA,QAAMpC,QAAQ,GAAW0B,KAAK,CAACI,KAAK,CAACxB,eAAN,CAAsByB,OAAO,CAACM,eAA9B,CAAD,CAA9B;AACA,QAAMnC,SAAS,GAAWwB,KAAK,CAACI,KAAK,CAAC3B,gBAAN,CAAuB4B,OAAO,CAACM,eAA/B,CAAD,CAA/B;AACA,QAAMvI,IAAI,GAAagI,KAAK,CAACtI,KAAN,CAAYM,IAAZ,CAAiBwI,GAAjB,CAAqB,UAAApJ,KAAK;AAAA,aAAIA,KAAK,CAAC/F,OAAV;AAAA,KAA1B,CAAvB;AACA,QAAMoP,QAAQ,GACZ,SAASR,OAAT,UACS,CAACS,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CZ,OAAO,CAACG,GAAnD,EAAwDxO,QAAxD,CAAiE,EAAjE,CADT,UAESqO,OAAO,CAACQ,QAAR,CAAiB7O,QAAjB,CAA0B,EAA1B,CAHX;AAKA,QAAMkP,gBAAgB,GAAGC,OAAO,CAACd,OAAO,CAACe,aAAT,CAAhC;AAEA,QAAIC,UAAJ;AACA,QAAIC,IAAJ;AACA,QAAInQ,KAAJ;;AACA,YAAQiP,KAAK,CAACxC,SAAd;AACE,WAAK9N,SAAS,CAACkO,WAAf;AACE,YAAIsC,SAAJ,EAAe;AACbe,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADa;;AAGbI,UAAAA,IAAI,GAAG,CAAC9C,SAAD,EAAYpG,IAAZ,EAAkBqI,EAAlB,EAAsBI,QAAtB,CAAP;AACA1P,UAAAA,KAAK,GAAGmN,QAAR;AACD,SALD,MAKO,IAAIiC,UAAJ,EAAgB;AACrBc,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADqB;;AAGrBI,UAAAA,IAAI,GAAG,CAAChD,QAAD,EAAWE,SAAX,EAAsBpG,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA1P,UAAAA,KAAK,GAAG8O,QAAR;AACD,SALM,MAKA;AACLoB,UAAAA,UAAU,GAAGH,gBAAgB,GACzB,uDADyB,GAEzB,0BAFJ,CADK;;AAKLI,UAAAA,IAAI,GAAG,CAAChD,QAAD,EAAWE,SAAX,EAAsBpG,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA1P,UAAAA,KAAK,GAAG8O,QAAR;AACD;;AACD;;AACF,WAAKnQ,SAAS,CAACoO,YAAf;AACE,SAAU,CAACgD,gBAAX,2CAAA5P,SAAS,QAAoB,eAApB,CAAT,GAAAA,SAAS,OAAT;;AACA,YAAIgP,SAAJ,EAAe;AACbe,UAAAA,UAAU,GAAG,uBAAb,CADa;;AAGbC,UAAAA,IAAI,GAAG,CAAC9C,SAAD,EAAYpG,IAAZ,EAAkBqI,EAAlB,EAAsBI,QAAtB,CAAP;AACA1P,UAAAA,KAAK,GAAGmN,QAAR;AACD,SALD,MAKO,IAAIiC,UAAJ,EAAgB;AACrBc,UAAAA,UAAU,GAAG,uBAAb,CADqB;;AAGrBC,UAAAA,IAAI,GAAG,CAAC9C,SAAD,EAAYF,QAAZ,EAAsBlG,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA1P,UAAAA,KAAK,GAAG8O,QAAR;AACD,SALM,MAKA;AACLoB,UAAAA,UAAU,GAAG,0BAAb,CADK;;AAGLC,UAAAA,IAAI,GAAG,CAAC9C,SAAD,EAAYF,QAAZ,EAAsBlG,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA1P,UAAAA,KAAK,GAAG8O,QAAR;AACD;;AACD;AAvCJ;;AAyCA,WAAO;AACLoB,MAAAA,UAAU,EAAVA,UADK;AAELC,MAAAA,IAAI,EAAJA,IAFK;AAGLnQ,MAAAA,KAAK,EAALA;AAHK,KAAP;AAKD,GA7EH;;AAAA;AAAA;;;;"}